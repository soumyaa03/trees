public class maxpath {
    public static class Node{
        int data;Node left,right;
        public Node(int data)
        {
            this.data=data;
            this.left=null;
            this.right=null;
        }}
        public Node root;public int maxsum,maxlen;
        maxpath()
        {
            root=null;
        }
        void sumOfLongestPath(Node root,int sum,int len)
        {
            if(root==null)
            {
                if(maxlen<len){
                    maxlen=len;
                    maxsum=sum;
                }
                else if(maxlen==len && maxsum<sum)
                    maxsum=sum;
                    return;

                
            }
            sumOfLongestPath(root.left,root.data+sum,len+1);
            sumOfLongestPath(root.right,root.data+ sum, len+1);
            

        }
        int sumOfLongestPathutil(Node root)
        {

            if(root==null)
            return 0;
            maxsum=Integer.MIN_VALUE;
            maxlen=0;
            sumOfLongestPath(root, 0, 0);
            
            return maxsum;
        }
        public static void main(String args[])
        {
            maxpath ob=new maxpath();
            Node root = new Node(4);              /*           4           */
            root.left = new Node(2);              /*       /       \       */
            root.right = new Node(5);             /*      2         5      */
            root.left.left = new Node(7);         /*     / \       / \     */
            root.left.right = new Node(1);        /*    7   1     2   3    */
            root.right.left = new Node(2);        /*         \   /         */
            root.right.left.left = new Node(8);   /*          6 8          */
            root.right.right = new Node(3);             
            root.left.right.left = new Node(6);
            System.out.println("Sum = "+ ob.sumOfLongestPathutil(root));
            
        }
		public void isSameLevel(maxpath.Node root2, int i) {
		}
    }
    

